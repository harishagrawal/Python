# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPython using AI Type  and AI Model 

ROOST_METHOD_HASH=diophantine_all_soln_e4fdffee2f
ROOST_METHOD_SIG_HASH=diophantine_all_soln_6952f58e7f


```
Scenario 1: Validate correct output for positive integer inputs
Details:
  TestName: test_diophantine_all_soln_positive_integers
  Description: This test is intended to verify that the function correctly calculates the solution of the diophantine equation with multiple positive integer inputs.
Execution:
  Arrange: No setup is required as we are passing the parameters directly.
  Act: Invoke the function with positive integer parameters, such as (10, 6, 14, 2).
  Assert: Check that the output matches the expected solutions.
Validation:
  This test is important to ensure that the function can correctly handle and calculate the solutions for positive integer inputs. The expected result is to match the known solutions for the given parameters, ensuring that the function implements the diophantine equation correctly.

Scenario 2: Validate correct output for negative integer inputs
Details:
  TestName: test_diophantine_all_soln_negative_integers
  Description: This test is intended to verify that the function correctly calculates the solution of the diophantine equation with multiple negative integer inputs.
Execution:
  Arrange: No setup is required as we are passing the parameters directly.
  Act: Invoke the function with negative integer parameters, such as (-10, -6, -14, 2).
  Assert: Check that the output matches the expected solutions.
Validation:
  This test is important to ensure that the function can correctly handle and calculate the solutions for negative integer inputs. The expected result is to match the known solutions for the given parameters, ensuring that the function implements the diophantine equation correctly.

Scenario 3: Validate correct output for mixed integer inputs
Details:
  TestName: test_diophantine_all_soln_mixed_integers
  Description: This test is intended to verify that the function correctly calculates the solution of the diophantine equation with a mix of positive and negative integer inputs.
Execution:
  Arrange: No setup is required as we are passing the parameters directly.
  Act: Invoke the function with mixed integer parameters, such as (391, 299, -69, 2).
  Assert: Check that the output matches the expected solutions.
Validation:
  This test is important to ensure that the function can correctly handle and calculate the solutions for mixed integer inputs. The expected result is to match the known solutions for the given parameters, ensuring that the function implements the diophantine equation correctly.

Scenario 4: Validate correct output when "n" parameter varies
Details:
  TestName: test_diophantine_all_soln_varying_n
  Description: This test is intended to verify that the function correctly calculates the desired number of solutions as specified by the "n" parameter.
Execution:
  Arrange: No setup is required as we are passing the parameters directly.
  Act: Invoke the function with varying "n" parameters, such as (10, 6, 14, 4).
  Assert: Check that the output matches the expected solutions and the number of solutions equals "n".
Validation:
  This test is important to ensure that the function can correctly calculate the desired number of solutions as specified by the "n" parameter. The expected result is to match the known solutions for the given parameters and the number of solutions should equal "n", ensuring that the function implements the diophantine equation correctly.

Scenario 5: Validate correct handling when there's no solution
Details:
  TestName: test_diophantine_all_soln_no_solution
  Description: This test is intended to verify that the function correctly handles cases where there are no solutions to the diophantine equation.
Execution:
  Arrange: No setup is required as we are passing the parameters directly.
  Act: Invoke the function with parameters that have no solution, such as (2, 4, 5, 2).
  Assert: Check that the function handles the case correctly without throwing errors and returns no solutions.
Validation:
  This test is important to ensure that the function can correctly handle cases where there are no solutions to the equation. The expected result is that the function does not throw errors and returns no solutions, ensuring that the function implements the diophantine equation correctly.
```
"""

# ********RoostGPT********
import unittest
from __future__ import annotations
from maths.greatest_common_divisor import greatest_common_divisor
from doctest import testmod
from io import StringIO
import sys
from blockchain.diophantine_equation import diophantine_all_soln

class Test_DiophantineEquationDiophantineAllSoln(unittest.TestCase):

    def setUp(self):
        self.held, sys.stdout = sys.stdout, StringIO()  # capture stdout to test print statements

    def tearDown(self):
        sys.stdout = self.held  # restore original stdout

    def test_diophantine_all_soln_positive_integers(self):
        diophantine_all_soln(10, 6, 14, 2)
        self.assertEqual(sys.stdout.getvalue().strip(), "-7.0 14.0\n-4.0 9.0")

    def test_diophantine_all_soln_negative_integers(self):
        diophantine_all_soln(-10, -6, -14, 2)
        self.assertEqual(sys.stdout.getvalue().strip(), "7.0 -14.0\n4.0 -9.0")

    def test_diophantine_all_soln_mixed_integers(self):
        diophantine_all_soln(391, 299, -69, 2)
        self.assertEqual(sys.stdout.getvalue().strip(), "9.0 -12.0\n22.0 -29.0")

    def test_diophantine_all_soln_varying_n(self):
        diophantine_all_soln(10, 6, 14, 4)
        self.assertEqual(sys.stdout.getvalue().strip(), "-7.0 14.0\n-4.0 9.0\n-1.0 4.0\n2.0 -1.0")

    def test_diophantine_all_soln_no_solution(self):
        with self.assertRaises(AssertionError):
            diophantine_all_soln(2, 4, 5, 2)

if __name__ == '__main__':
    unittest.main()
