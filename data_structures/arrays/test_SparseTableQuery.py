# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPythonTest using AI Type  and AI Model 

ROOST_METHOD_HASH=query_d0f7abcd9c
ROOST_METHOD_SIG_HASH=query_cf3af96663


Scenario 1: Validating Query With Range Within List Bounds
Details:
  TestName: test_query_valid_range
  Description: This test verifies that the function correctly returns the minimum value from the specified range of the list when the range is within the bounds of the list.
Execution:
  Arrange: A list of integers is prepared and a sparse_table is built from it. Known bounds are chosen for the range.
  Act: The query function is invoked with the prepared sparse_table and the known bounds.
  Assert: The returned value is checked against the expected minimum value from the known range of the list.
Validation:
  This test is crucial as it validates the primary functionality of the query function - to return the minimum value from a specific range of the list. The expected result aligns with the function's specifications and business requirements.

Scenario 2: Validating Query With Single Element Range
Details:
  TestName: test_query_single_element_range
  Description: This test verifies that the function correctly returns the single value when the left and right bounds are the same, effectively creating a range of a single element.
Execution:
  Arrange: A list of integers is prepared and a sparse_table is built from it. A single index is chosen for both bounds.
  Act: The query function is invoked with the prepared sparse_table and the single index for both bounds.
  Assert: The returned value is checked against the expected value from the chosen index of the list.
Validation:
  This test is crucial as it checks the function's behavior when the range is a single element. The expected result aligns with the function's specifications and business requirements.

Scenario 3: Validating Query With Range Exceeding List Bounds
Details:
  TestName: test_query_range_exceeding_bounds
  Description: This test verifies that the function correctly raises an IndexError when the range exceeds the bounds of the list.
Execution:
  Arrange: A list of integers is prepared and a sparse_table is built from it. Known bounds that exceed the list's bounds are chosen for the range.
  Act: The query function is invoked with the prepared sparse_table and the exceeding bounds.
  Assert: The function is expected to raise an IndexError.
Validation:
  This test is crucial as it confirms the function's ability to handle invalid input and raise appropriate errors. The expected result aligns with the function's specifications and business requirements.

Scenario 4: Validating Query With Empty List
Details:
  TestName: test_query_empty_list
  Description: This test verifies that the function correctly raises a ValueError when an empty list is provided.
Execution:
  Arrange: An empty list is prepared and a sparse_table is built from it.
  Act: The query function is invoked with the prepared sparse_table and any bounds.
  Assert: The function is expected to raise a ValueError.
Validation:
  This test is crucial as it confirms the function's ability to handle empty input and raise appropriate errors. The expected result aligns with the function's specifications and business requirements.
"""

# ********RoostGPT********
import pytest
from math import log2
from arrays.sparse_table import query

class Test_SparseTableQuery:

    @pytest.mark.valid
    def test_query_valid_range(self):
        # Arrange
        num_list = [8, 1, 0, 3, 4, 9, 3]
        sparse_table = build_sparse_table(num_list)
        left_bound = 0
        right_bound = 4

        # Act
        result = query(sparse_table, left_bound, right_bound)

        # Assert
        assert result == 0, "The function failed to return the minimum value from the specified range."

    @pytest.mark.valid
    def test_query_single_element_range(self):
        # Arrange
        num_list = [3, 1, 9]
        sparse_table = build_sparse_table(num_list)
        single_index = 2

        # Act
        result = query(sparse_table, single_index, single_index)

        # Assert
        assert result == 9, "The function failed to return the single value from the specified index."

    @pytest.mark.invalid
    def test_query_range_exceeding_bounds(self):
        # Arrange
        num_list = [8, 1, 0, 3, 4, 9, 3]
        sparse_table = build_sparse_table(num_list)
        left_bound = 0
        right_bound = 11

        # Act & Assert
        with pytest.raises(IndexError):
            query(sparse_table, left_bound, right_bound)

    @pytest.mark.invalid
    def test_query_empty_list(self):
        # Arrange
        num_list = []
        sparse_table = build_sparse_table(num_list)

        # Act & Assert
        with pytest.raises(ValueError):
            query(sparse_table, 0, 0)
