# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPythonTest using AI Type  and AI Model 

ROOST_METHOD_HASH=find_median_sorted_arrays_9bc0fa372d
ROOST_METHOD_SIG_HASH=find_median_sorted_arrays_09867eaded


```
Scenario 1: Testing the median calculation with two odd length arrays
Details:
  TestName: test_find_median_odd_length_arrays
  Description: This test verifies that the function correctly calculates the median of two odd length arrays.
Execution:
  Arrange: Initialize two odd length arrays with sorted integer values.
  Act: Invoke the find_median_sorted_arrays function, passing the two arrays as parameters.
  Assert: Check that the returned value matches the expected median.
Validation:
  The test validates that the function correctly handles odd length arrays, which aligns with the function's specifications and business requirements.

Scenario 2: Testing the median calculation with two even length arrays
Details:
  TestName: test_find_median_even_length_arrays
  Description: This test verifies that the function correctly calculates the median of two even length arrays.
Execution:
  Arrange: Initialize two even length arrays with sorted integer values.
  Act: Invoke the find_median_sorted_arrays function, passing the two arrays as parameters.
  Assert: Check that the returned value matches the expected median.
Validation:
  The test validates that the function correctly handles even length arrays, which aligns with the function's specifications and business requirements.

Scenario 3: Testing the median calculation with one empty array
Details:
  TestName: test_find_median_one_empty_array
  Description: This test verifies that the function correctly calculates the median when one of the arrays is empty.
Execution:
  Arrange: Initialize one array with sorted integer values and another as an empty array.
  Act: Invoke the find_median_sorted_arrays function, passing the two arrays as parameters.
  Assert: Check that the returned value matches the expected median.
Validation:
  The test validates that the function correctly handles scenarios where one of the arrays is empty, which aligns with the function's specifications and business requirements.

Scenario 4: Testing the function with two empty arrays
Details:
  TestName: test_find_median_two_empty_arrays
  Description: This test verifies that the function raises a ValueError when both arrays are empty.
Execution:
  Arrange: Initialize two empty arrays.
  Act: Invoke the find_median_sorted_arrays function, passing the two arrays as parameters.
  Assert: Check that a ValueError is raised.
Validation:
  The test validates that the function correctly raises an error when both arrays are empty, which aligns with the function's specifications and business requirements.

Scenario 5: Testing the median calculation with negative numbers
Details:
  TestName: test_find_median_negative_numbers
  Description: This test verifies that the function correctly calculates the median when the arrays contain negative numbers.
Execution:
  Arrange: Initialize two arrays with sorted negative integer values.
  Act: Invoke the find_median_sorted_arrays function, passing the two arrays as parameters.
  Assert: Check that the returned value matches the expected median.
Validation:
  The test validates that the function correctly handles arrays with negative numbers, which aligns with the function's specifications and business requirements.
  
Scenario 6: Testing the median calculation with decimal numbers
Details:
  TestName: test_find_median_decimal_numbers
  Description: This test verifies that the function correctly calculates the median when the arrays contain decimal numbers.
Execution:
  Arrange: Initialize two arrays with sorted decimal values.
  Act: Invoke the find_median_sorted_arrays function, passing the two arrays as parameters.
  Assert: Check that the returned value matches the expected median.
Validation:
  The test validates that the function correctly handles arrays with decimal numbers, which aligns with the function's specifications and business requirements.
```
"""

# ********RoostGPT********
import pytest
from arrays.median_two_array import find_median_sorted_arrays

class Test_MedianTwoArrayFindMedianSortedArrays:
    @pytest.mark.regression
    def test_find_median_odd_length_arrays(self):
        nums1 = [1, 3, 5]
        nums2 = [2, 4, 6]
        result = find_median_sorted_arrays(nums1, nums2)
        assert result == 3.5, "Test case test_find_median_odd_length_arrays failed"
    
    @pytest.mark.regression
    def test_find_median_even_length_arrays(self):
        nums1 = [1, 3]
        nums2 = [2, 4]
        result = find_median_sorted_arrays(nums1, nums2)
        assert result == 2.5, "Test case test_find_median_even_length_arrays failed"
    
    @pytest.mark.regression
    def test_find_median_one_empty_array(self):
        nums1 = []
        nums2 = [1, 2, 3, 4, 5]
        result = find_median_sorted_arrays(nums1, nums2)
        assert result == 3.0, "Test case test_find_median_one_empty_array failed"
    
    @pytest.mark.regression
    def test_find_median_two_empty_arrays(self):
        nums1 = []
        nums2 = []
        with pytest.raises(ValueError):
            find_median_sorted_arrays(nums1, nums2)
    
    @pytest.mark.regression
    def test_find_median_negative_numbers(self):
        nums1 = [-1, -2, -3]
        nums2 = [-4, -5, -6]
        result = find_median_sorted_arrays(nums1, nums2)
        assert result == -3.5, "Test case test_find_median_negative_numbers failed"
    
    @pytest.mark.regression
    def test_find_median_decimal_numbers(self):
        nums1 = [1.1, 2.2, 3.3]
        nums2 = [4.4, 5.5, 6.6]
        result = find_median_sorted_arrays(nums1, nums2)
        assert result == 3.85, "Test case test_find_median_decimal_numbers failed"
