# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPythonTest using AI Type  and AI Model 

ROOST_METHOD_HASH=product_sum_array_b48fa8c86e
ROOST_METHOD_SIG_HASH=product_sum_array_a9752e0e69


Scenario 1: Test with a simple list of integers
Details:
  TestName: test_product_sum_array_with_simple_list
  Description: This test verifies that the function correctly calculates the product sum of a simple list of integers.
Execution:
  Arrange: Initialize a simple list of integers.
  Act: Call the function with the initialized list.
  Assert: Check that the returned value is the sum of the integers in the list.
Validation:
  Rationalize the importance of the test and the expected result's connection to the function's specifications and business requirements. This test is important as it verifies the basic functionality of the function, which is to calculate the product sum of a list.

Scenario 2: Test with a nested list of integers
Details:
  TestName: test_product_sum_array_with_nested_list
  Description: This test verifies that the function correctly calculates the product sum of a nested list of integers.
Execution:
  Arrange: Initialize a nested list of integers.
  Act: Call the function with the initialized list.
  Assert: Check that the returned value is the correct product sum of the nested list.
Validation:
  This test is important as it verifies the recursive aspect of the function, which is crucial to its functionality when dealing with nested lists.

Scenario 3: Test with a list containing zero
Details:
  TestName: test_product_sum_array_with_zero
  Description: This test verifies that the function correctly handles a list containing zero.
Execution:
  Arrange: Initialize a list containing zero.
  Act: Call the function with the initialized list.
  Assert: Check that the returned value is the correct product sum of the list.
Validation:
  This test is important as it checks that the function correctly handles the special case of zero, which could potentially cause issues in the calculation.

Scenario 4: Test with a list containing negative numbers
Details:
  TestName: test_product_sum_array_with_negative_numbers
  Description: This test verifies that the function correctly handles a list containing negative numbers.
Execution:
  Arrange: Initialize a list containing negative numbers.
  Act: Call the function with the initialized list.
  Assert: Check that the returned value is the correct product sum of the list.
Validation:
  This test is important as it checks that the function correctly handles negative numbers, which could potentially cause issues in the calculation.

Scenario 5: Test with an empty list
Details:
  TestName: test_product_sum_array_with_empty_list
  Description: This test verifies that the function correctly handles an empty list.
Execution:
  Arrange: Initialize an empty list.
  Act: Call the function with the initialized list.
  Assert: Check that the returned value is zero.
Validation:
  This test is important as it checks that the function correctly handles edge cases, such as an empty list.
"""

# ********RoostGPT********
import pytest
from arrays.product_sum import product_sum_array

class Test_ProductSumArray:

    def test_product_sum_array_with_simple_list(self):
        simple_list = [1, 2, 3]
        result = product_sum_array(simple_list)
        assert result == 6, "Should be 6"

    def test_product_sum_array_with_nested_list(self):
        nested_list = [1, [2, 3]]
        result = product_sum_array(nested_list)
        assert result == 11, "Should be 11"

    def test_product_sum_array_with_zero(self):
        zero_list = [0]
        result = product_sum_array(zero_list)
        assert result == 0, "Should be 0"

    def test_product_sum_array_with_negative_numbers(self):
        negative_list = [1, -2]
        result = product_sum_array(negative_list)
        assert result == -1, "Should be -1"

    def test_product_sum_array_with_empty_list(self):
        empty_list = []
        result = product_sum_array(empty_list)
        assert result == 0, "Should be 0"
