# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPythonTest using AI Type  and AI Model 

ROOST_METHOD_HASH=build_sparse_table_52fe1d3205
ROOST_METHOD_SIG_HASH=build_sparse_table_14070c4f1a


Scenario 1: Test with a list containing a single element
Details:
  TestName: test_build_sparse_table_single_element
  Description: This test is intended to verify that the function correctly handles a list with a single element. The sparse table should contain only one row with the single element.
Execution:
  Arrange: Create a list with a single element, say [5].
  Act: Call the build_sparse_table function with the list as input.
  Assert: The returned sparse table should contain only one row with the single element, i.e., [[5]].
Validation:
  The function is expected to handle lists of any size, including those with one element. The sparse table for a list with a single element should contain only one row with the single element.

Scenario 2: Test with a list of increasing integers
Details:
  TestName: test_build_sparse_table_increasing_integers
  Description: This test is intended to verify that the function correctly builds a sparse table for a list of increasing integers.
Execution:
  Arrange: Create a list of increasing integers, say [1, 2, 3, 4, 5].
  Act: Call the build_sparse_table function with the list as input.
  Assert: The returned sparse table should contain rows with the minimum values of subsets of the list.
Validation:
  For a list of increasing integers, each row in the sparse table should contain the minimum value of the corresponding subset of the list. This test validates that the function correctly computes these minimum values.

Scenario 3: Test with a list of decreasing integers
Details:
  TestName: test_build_sparse_table_decreasing_integers
  Description: This test is intended to verify that the function correctly builds a sparse table for a list of decreasing integers.
Execution:
  Arrange: Create a list of decreasing integers, say [5, 4, 3, 2, 1].
  Act: Call the build_sparse_table function with the list as input.
  Assert: The returned sparse table should contain rows with the minimum values of subsets of the list.
Validation:
  For a list of decreasing integers, each row in the sparse table should contain the minimum value of the corresponding subset of the list. This test validates that the function correctly computes these minimum values.

Scenario 4: Test with a list of random integers
Details:
  TestName: test_build_sparse_table_random_integers
  Description: This test is intended to verify that the function correctly builds a sparse table for a list of random integers.
Execution:
  Arrange: Create a list of random integers, say [3, 1, 4, 2, 5].
  Act: Call the build_sparse_table function with the list as input.
  Assert: The returned sparse table should contain rows with the minimum values of subsets of the list.
Validation:
  For a list of random integers, each row in the sparse table should contain the minimum value of the corresponding subset of the list. This test validates that the function correctly computes these minimum values.

Scenario 5: Test with an empty list
Details:
  TestName: test_build_sparse_table_empty_list
  Description: This test is intended to verify that the function raises a ValueError when given an empty list as input.
Execution:
  Arrange: Create an empty list.
  Act: Call the build_sparse_table function with the empty list as input.
  Assert: The function should raise a ValueError with the message "empty number list not allowed".
Validation:
  The function is expected to raise a ValueError when given an empty list as input. This test validates that the function correctly raises this error.
"""

# ********RoostGPT********
import pytest
from math import log2
from doctest import testmod
from arrays.sparse_table import build_sparse_table

class Test_SparseTableBuildSparseTable:

    def test_build_sparse_table_single_element(self):
        # Arrange
        numbers = [5]
        # Act
        result = build_sparse_table(numbers)
        # Assert
        assert result == [[5]]

    def test_build_sparse_table_increasing_integers(self):
        # Arrange
        numbers = [1, 2, 3, 4, 5]
        # Act
        result = build_sparse_table(numbers)
        # Assert
        assert result == [[1, 2, 3, 4, 5], [1, 2, 3, 4, 0], [1, 2, 0, 0, 0]]

    def test_build_sparse_table_decreasing_integers(self):
        # Arrange
        numbers = [5, 4, 3, 2, 1]
        # Act
        result = build_sparse_table(numbers)
        # Assert
        assert result == [[5, 4, 3, 2, 1], [4, 3, 2, 1, 0], [3, 2, 0, 0, 0]]

    def test_build_sparse_table_random_integers(self):
        # Arrange
        numbers = [3, 1, 4, 2, 5]
        # Act
        result = build_sparse_table(numbers)
        # Assert
        assert result == [[3, 1, 4, 2, 5], [1, 1, 2, 2, 0], [1, 1, 0, 0, 0]]

    def test_build_sparse_table_empty_list(self):
        # Arrange
        numbers = []
        # Act & Assert
        with pytest.raises(ValueError, match="empty number list not allowed"):
            build_sparse_table(numbers)
