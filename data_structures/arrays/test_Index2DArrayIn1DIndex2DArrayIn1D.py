# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPythonTest using AI Type  and AI Model 

ROOST_METHOD_HASH=index_2d_array_in_1d_21a09b2ac9
ROOST_METHOD_SIG_HASH=index_2d_array_in_1d_20d222a831


Scenario 1: Valid Index for 2D Array
Details:
  TestName: test_valid_index_on_2d_array
  Description: This test is intended to verify that the function correctly retrieves the value at a given index when the index is valid and the array is a two-dimensional array.
Execution:
  Arrange: Initialize a 2D array with known values and a valid index.
  Act: Pass the array and the index to the function.
  Assert: The function should return the value at the given index.
Validation:
  This test verifies that the function correctly implements the business logic for retrieving a value from a 2D array at a given index. The expected result is based on the function's specifications and the business requirements for indexing a 2D array.

Scenario 2: Index Out of Range
Details:
  TestName: test_index_out_of_range
  Description: This test is intended to verify that the function raises a ValueError when the index is out of range.
Execution:
  Arrange: Initialize a 2D array with known values and an index that is out of range.
  Act: Pass the array and the index to the function.
  Assert: The function should raise a ValueError.
Validation:
  This test verifies that the function correctly handles the case where the index is out of range. This is an important edge case to test, as it checks the function's robustness against invalid input.

Scenario 3: Empty 2D Array
Details:
  TestName: test_empty_2d_array
  Description: This test is intended to verify that the function raises a ValueError when the array is empty.
Execution:
  Arrange: Initialize an empty 2D array and an index.
  Act: Pass the array and the index to the function.
  Assert: The function should raise a ValueError.
Validation:
  This test verifies that the function correctly handles the case where the array is empty. This is an important edge case to test, as it checks the function's robustness against invalid input.

Scenario 4: Zero Rows or Columns in 2D Array
Details:
  TestName: test_zero_rows_or_columns_in_2d_array
  Description: This test is intended to verify that the function raises a ValueError when the array has zero rows or columns.
Execution:
  Arrange: Initialize a 2D array with zero rows or columns and an index.
  Act: Pass the array and the index to the function.
  Assert: The function should raise a ValueError.
Validation:
  This test verifies that the function correctly handles the case where the array has zero rows or columns. This is an important edge case to test, as it checks the function's robustness against invalid input.
"""

# ********RoostGPT********
import pytest
from arrays.index_2d_array_in_1d import index_2d_array_in_1d

class Test_Index2DArrayIn1DIndex2DArrayIn1D:

    def test_valid_index_on_2d_array(self):
        array = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
        index = 5
        expected = 5
        assert index_2d_array_in_1d(array, index) == expected

    def test_index_out_of_range(self):
        array = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
        index = 12
        with pytest.raises(ValueError, match="index out of range"):
            index_2d_array_in_1d(array, index)

    def test_empty_2d_array(self):
        array = []
        index = 0
        with pytest.raises(ValueError, match="no items in array"):
            index_2d_array_in_1d(array, index)

    def test_zero_rows_or_columns_in_2d_array(self):
        array = [[]]
        index = 0
        with pytest.raises(ValueError, match="no items in array"):
            index_2d_array_in_1d(array, index)
