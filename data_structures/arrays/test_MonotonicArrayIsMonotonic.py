# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPythonTest using AI Type  and AI Model 

ROOST_METHOD_HASH=is_monotonic_c787c79d3e
ROOST_METHOD_SIG_HASH=is_monotonic_5e916fe8f2


Scenario 1: Testing with an increasing list
Details:
  TestName: test_is_monotonic_increasing_list
  Description: This test is intended to verify if the function correctly identifies a list where numbers are in increasing or equal order.
Execution:
  Arrange: Prepare a list of integers in increasing order.
  Act: Call the is_monotonic function with the prepared list as an argument.
  Assert: The function should return True.
Validation:
  This test is important because it checks whether the function correctly identifies monotonic increasing sequences, which is a fundamental part of its specifications.

Scenario 2: Testing with a decreasing list
Details:
  TestName: test_is_monotonic_decreasing_list
  Description: This test is intended to verify if the function correctly identifies a list where numbers are in decreasing or equal order.
Execution:
  Arrange: Prepare a list of integers in decreasing order.
  Act: Call the is_monotonic function with the prepared list as an argument.
  Assert: The function should return True.
Validation:
  This test is important because it checks whether the function correctly identifies monotonic decreasing sequences, which is a fundamental part of its specifications.

Scenario 3: Testing with a list that is not monotonic
Details:
  TestName: test_is_monotonic_non_monotonic_list
  Description: This test is intended to verify if the function correctly identifies a list that is not monotonic.
Execution:
  Arrange: Prepare a list of integers that is not in a strictly increasing or decreasing order.
  Act: Call the is_monotonic function with the prepared list as an argument.
  Assert: The function should return False.
Validation:
  This test is important because it checks whether the function correctly identifies non-monotonic sequences, which is a fundamental part of its specifications.

Scenario 4: Testing with an empty list
Details:
  TestName: test_is_monotonic_empty_list
  Description: This test is intended to verify how the function behaves when given an empty list.
Execution:
  Arrange: Prepare an empty list.
  Act: Call the is_monotonic function with the empty list as an argument.
  Assert: The function should return True, as an empty list can be considered as both increasing and decreasing.
Validation:
  This test is important because it checks how the function handles edge cases, which is a crucial part of its robustness.

Scenario 5: Testing with a list containing only one element
Details:
  TestName: test_is_monotonic_single_element_list
  Description: This test is intended to verify how the function behaves when given a list with only one element.
Execution:
  Arrange: Prepare a list with one integer.
  Act: Call the is_monotonic function with the one-element list as an argument.
  Assert: The function should return True, as a single-element list can be considered as both increasing and decreasing.
Validation:
  This test is important because it checks how the function handles edge cases, which is a crucial part of its robustness.
"""

# ********RoostGPT********
import pytest
from arrays.monotonic_array import is_monotonic

class Test_MonotonicArrayIsMonotonic:

    def test_is_monotonic_increasing_list(self):
        test_list = [1, 2, 2, 3]
        assert is_monotonic(test_list) == True

    def test_is_monotonic_decreasing_list(self):
        test_list = [6, 5, 4, 4]
        assert is_monotonic(test_list) == True

    def test_is_monotonic_non_monotonic_list(self):
        test_list = [1, 3, 2]
        assert is_monotonic(test_list) == False

    def test_is_monotonic_empty_list(self):
        test_list = []
        assert is_monotonic(test_list) == True

    def test_is_monotonic_single_element_list(self):
        test_list = [1]
        assert is_monotonic(test_list) == True
