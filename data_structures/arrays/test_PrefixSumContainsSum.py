# ********RoostGPT********
"""
Test generated by RoostGPT for test demoPythonTest using AI Type  and AI Model 

ROOST_METHOD_HASH=contains_sum_7218874ebe
ROOST_METHOD_SIG_HASH=contains_sum_d0585ae265


```
Scenario 1: Test when the target_sum is exactly the sum of all elements in the array
Details:
  TestName: test_contains_sum_total_array
  Description: This test is intended to verify if the function correctly identifies when the target_sum is equal to the sum of all elements in the array
Execution:
  Arrange: Initialize an object of PrefixSum with an array of integers.
  Act: Invoke the contains_sum function with target_sum being the sum of all elements in the array.
  Assert: The function should return True.
Validation:
  This test verifies that the function correctly handles the scenario when the target_sum is the total sum of all elements in the array. This is important as it is a basic requirement of the function as per its specification.

Scenario 2: Test when the target_sum is not present in the array
Details:
  TestName: test_contains_sum_not_present
  Description: This test is intended to verify if the function correctly identifies when the target_sum is not present in the array.
Execution:
  Arrange: Initialize an object of PrefixSum with an array of integers.
  Act: Invoke the contains_sum function with a target_sum that is not present in the array.
  Assert: The function should return False.
Validation:
  This test verifies that the function correctly handles the scenario when the target_sum is not present in the array. This is important as it is a basic requirement of the function as per its specification.

Scenario 3: Test when the target_sum is present as a subset of the array
Details:
  TestName: test_contains_sum_subset_present
  Description: This test is intended to verify if the function correctly identifies when the target_sum is present as a subset of the array.
Execution:
  Arrange: Initialize an object of PrefixSum with an array of integers.
  Act: Invoke the contains_sum function with a target_sum that is present as a subset in the array.
  Assert: The function should return True.
Validation:
  This test verifies that the function correctly handles the scenario when the target_sum is present as a subset in the array. This is important as it is a basic requirement of the function as per its specification.

Scenario 4: Test when the array contains negative numbers and the target_sum is present
Details:
  TestName: test_contains_sum_with_negative_numbers
  Description: This test is intended to verify if the function correctly identifies when the array contains negative numbers and the target_sum is present.
Execution:
  Arrange: Initialize an object of PrefixSum with an array of integers containing negative numbers.
  Act: Invoke the contains_sum function with a target_sum that is present in the array.
  Assert: The function should return True.
Validation:
  This test verifies that the function correctly handles the scenario when the array contains negative numbers and the target_sum is present. This is important as it is a basic requirement of the function as per its specification.

Scenario 5: Edge case when the array is empty
Details:
  TestName: test_contains_sum_empty_array
  Description: This test is intended to verify if the function correctly handles the edge case when the array is empty.
Execution:
  Arrange: Initialize an object of PrefixSum with an empty array.
  Act: Invoke the contains_sum function with any target_sum.
  Assert: The function should return False.
Validation:
  This test verifies that the function correctly handles the edge case when the array is empty. This is important as it is a basic requirement of the function as per its specification.
```

"""

# ********RoostGPT********
import pytest
from arrays.prefix_sum import PrefixSum

class Test_PrefixSumContainsSum:

    def test_contains_sum_total_array(self):
        # Arrange
        array = [1, 2, 3, 4, 5]
        target_sum = sum(array)
        prefix_sum_obj = PrefixSum(array)

        # Act
        result = prefix_sum_obj.contains_sum(target_sum)

        # Assert
        assert result == True

    def test_contains_sum_not_present(self):
        # Arrange
        array = [1, 2, 3, 4, 5]
        target_sum = 15
        prefix_sum_obj = PrefixSum(array)

        # Act
        result = prefix_sum_obj.contains_sum(target_sum)

        # Assert
        assert result == False

    def test_contains_sum_subset_present(self):
        # Arrange
        array = [1, 2, 3, 4, 5]
        target_sum = 10
        prefix_sum_obj = PrefixSum(array)

        # Act
        result = prefix_sum_obj.contains_sum(target_sum)

        # Assert
        assert result == True

    def test_contains_sum_with_negative_numbers(self):
        # Arrange
        array = [1, -2, 3, 4, -5]
        target_sum = 1
        prefix_sum_obj = PrefixSum(array)

        # Act
        result = prefix_sum_obj.contains_sum(target_sum)

        # Assert
        assert result == True

    def test_contains_sum_empty_array(self):
        # Arrange
        array = []
        target_sum = 10
        prefix_sum_obj = PrefixSum(array)

        # Act
        result = prefix_sum_obj.contains_sum(target_sum)

        # Assert
        assert result == False
